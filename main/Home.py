import pandas as pd
import streamlit as st
import altair as alt
import numpy as np
import os
import sys
from io import BytesIO
from pathlib import Path
from PIL import Image

# Inclus√£o do caminho do root do app para que o python consiga encontrar os packages em /libs
sys.path.insert(0, "./")

from libs.data_cleaning import *


# PANDAS CONFIG
# -------------------------------------------------------------
pd.set_option("display.precision", 2)
pd.get_option("display.precision")


# PAGINA DO APP CONFIG
# -------------------------------------------------------------
st.set_page_config(page_title="B3 Analyzer", layout="wide")


# CAMINHO PARA O LOGO
# -------------------------------------------------------------
caminho_app = Path(__file__).parent.parent
caminho_pasta_imagens = caminho_app / "res" / "logo"
listar_arquivos = os.listdir(caminho_pasta_imagens)
selecionar_imagem = listar_arquivos[0] if listar_arquivos else None
caminho_arquivo_imagem = caminho_pasta_imagens / selecionar_imagem


# APP PRINCIPAL
# -------------------------------------------------------------
# Sidebar - upload dos extratos
with st.sidebar:
    extratos = st.file_uploader(
        label="Envie os extratos da B3 em excel (extens√£o .xlsx)",
        accept_multiple_files=True,
    )

    st.markdown("---")


# Mostra as informa√ß√µes no Streamlit quando feito o upload dos extratos, sen√£o mostra tela inicial informando apra fazer o upload.
if extratos:
    # Ler e concatenar extratos em um dataframe √∫nico
    df = ler_arquivos(extratos=extratos)

    # Tratar o dataframe gerado para an√°lise
    df = tratar_dados(df=df)

    # Filtros
    with st.sidebar:
        st.markdown("Filtros:")

        statement = st.multiselect(
            label="Movimenta√ß√£o",
            options=df["Movimenta√ß√£o"].sort_values(ascending=True).unique(),
            default=None,
            placeholder="",
        )
        ticker = st.multiselect(
            label="Ticker",
            options=df["Ticker"].sort_values(ascending=True).unique(),
            default=None,
            placeholder="",
        )
        broker = st.multiselect(
            label="Corretora",
            options=df["Institui√ß√£o"].sort_values(ascending=True).unique(),
            default=None,
            placeholder="",
        )

        st.markdown("---")

        st.markdown(
            "[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/B0B3V8QAU)"
        )

    # L√≥gica dos filtros
    query = []
    if statement:
        query.append(f"Movimenta√ß√£o == {statement}")

    if ticker:
        query.append(f"Ticker == {ticker}")

    if broker:
        query.append(f"Institui√ß√£o == {broker}")

    if query:
        df_filtered = df.query(" and ".join(query))

    else:
        df_filtered = df

    st.dataframe(data=df_filtered)

else:
    # Mostrar mensagem de erro se o logo n√£o for encontrado
    if not selecionar_imagem:
        st.write("N√£o foram encontradas imagens na pasta.")

    else:
        logo_path = caminho_pasta_imagens / selecionar_imagem
        img = Image.open(logo_path)
        st.image(img, width=250)

        st.markdown("# B3 Analyzer")

        st.markdown(
            """
            Bem vindo ao B3 Analyzer!

            Este app tem o objetivo de fornecer informa√ß√µes sobre os investimentos na bolsa de valores com base nos extratos fornecidos pela B3.

            Fa√ßa o upload dos extratos da B3 na tela lateral para que as an√°lises sejam apresentadas.
            
            **Dica**: fa√ßa o download dos extratos por ano na B3, e fa√ßa o upload de todos os extratos para ver as informa√ß√µes consolidadas.

            """
        )

        st.markdown("---")

        st.markdown("### Fa√ßa o upload dos seus extratos na tela lateral üëà")

        with st.sidebar:

            st.markdown(
                "[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/B0B3V8QAU)"
            )
